<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 小虎 - Mechanical student,Robot enthusiast</title>
    <link>https://littlethinking.cn/post/</link>
    <description>Recent content in Posts on 小虎 - Mechanical student,Robot enthusiast</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 17 Jan 2022 12:01:23 +0800</lastBuildDate><atom:link href="https://littlethinking.cn/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【LeetCode题解】6、Z字形变换</title>
      <link>https://littlethinking.cn/post/leetcode%E9%A2%98%E8%A7%A3/leetcode%E9%A2%98%E8%A7%A36z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</link>
      <pubDate>Mon, 17 Jan 2022 12:01:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/leetcode%E9%A2%98%E8%A7%A3/leetcode%E9%A2%98%E8%A7%A36z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</guid>
      <description>1 题目 将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。 比如输入字符串为 &amp;quot;PAYPALISHIRING&amp;quot; 行数为 3 时，排列如下： 1 2 3 P A H N A P L S</description>
    </item>
    
    <item>
      <title>【LeetCode题解】5、最长回文子串</title>
      <link>https://littlethinking.cn/post/leetcode%E9%A2%98%E8%A7%A3/leetcode%E9%A2%98%E8%A7%A35%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Tue, 11 Jan 2022 12:01:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/leetcode%E9%A2%98%E8%A7%A3/leetcode%E9%A2%98%E8%A7%A35%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</guid>
      <description>1 题目 给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为1000。 示例1 1 2 3 输入: &amp;#34;babad&amp;#34; 输出: &amp;#34;bab&amp;#34; 注意: &amp;#34;aba&amp;#34; 也是一个有效答案。 示例</description>
    </item>
    
    <item>
      <title>【LeetCode题解】4、寻找两个有序数组的中位数</title>
      <link>https://littlethinking.cn/post/leetcode%E9%A2%98%E8%A7%A3/leetcode%E9%A2%98%E8%A7%A34%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</link>
      <pubDate>Mon, 10 Jan 2022 12:01:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/leetcode%E9%A2%98%E8%A7%A3/leetcode%E9%A2%98%E8%A7%A34%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</guid>
      <description>1 题目 给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。 算法的时间复杂度应该为 O(log (m+n)) 。 示例1</description>
    </item>
    
    <item>
      <title>【LeetCode题解】3、无重复字符的最长子串</title>
      <link>https://littlethinking.cn/post/leetcode%E9%A2%98%E8%A7%A3/leetcode%E9%A2%98%E8%A7%A33%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Thu, 30 Dec 2021 12:01:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/leetcode%E9%A2%98%E8%A7%A3/leetcode%E9%A2%98%E8%A7%A33%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</guid>
      <description>1 题目 给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。 示例 1 2 3 示例1 给定 &amp;#34;abcabcbb&amp;#34; ，没有重复字符的最长子串是 &amp;#34;abc&amp;#34; ，那么长度就是 3。 示例</description>
    </item>
    
    <item>
      <title>【LeetCode题解】2、两数相加</title>
      <link>https://littlethinking.cn/post/leetcode%E9%A2%98%E8%A7%A3/leetcode%E9%A2%98%E8%A7%A32%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</link>
      <pubDate>Wed, 29 Dec 2021 12:01:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/leetcode%E9%A2%98%E8%A7%A3/leetcode%E9%A2%98%E8%A7%A32%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</guid>
      <description>1 题目 给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。 你可以假设除了数字</description>
    </item>
    
    <item>
      <title>【LeetCode题解】1、两数之和</title>
      <link>https://littlethinking.cn/post/leetcode%E9%A2%98%E8%A7%A3/leetcode%E9%A2%98%E8%A7%A31%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Tue, 28 Dec 2021 12:01:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/leetcode%E9%A2%98%E8%A7%A3/leetcode%E9%A2%98%E8%A7%A31%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>1 题目 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的两个整数。 你可以假设每种输入只会对应一个答案。但是，你不能重</description>
    </item>
    
    <item>
      <title>【CAN总线学习笔记】7、位时间实例</title>
      <link>https://littlethinking.cn/post/can%E6%80%BB%E7%BA%BF/can%E6%80%BB%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07%E4%BD%8D%E6%97%B6%E9%97%B4%E5%AE%9E%E4%BE%8B/</link>
      <pubDate>Sun, 26 Dec 2021 12:01:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/can%E6%80%BB%E7%BA%BF/can%E6%80%BB%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07%E4%BD%8D%E6%97%B6%E9%97%B4%E5%AE%9E%E4%BE%8B/</guid>
      <description>本部分将根据Infineon的芯片手册对位时间如何计算和如何配置位时间的寄存器进行说明。 假设我们有一条需求：设置CAN通讯的波特率为500K</description>
    </item>
    
    <item>
      <title>【CAN总线学习笔记】6、数据传输同步</title>
      <link>https://littlethinking.cn/post/can%E6%80%BB%E7%BA%BF/can%E6%80%BB%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Sat, 25 Dec 2021 12:01:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/can%E6%80%BB%E7%BA%BF/can%E6%80%BB%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E5%90%8C%E6%AD%A5/</guid>
      <description>1 位速率概念 位速率（也叫做比特率）表示的是单位时间内，总线上传输的信息量，即每秒能够传输的二进制位的数量，R=1/T ，单位是bit per seco</description>
    </item>
    
    <item>
      <title>【CAN总线学习笔记】5、报文过滤</title>
      <link>https://littlethinking.cn/post/can%E6%80%BB%E7%BA%BF/can%E6%80%BB%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05%E6%8A%A5%E6%96%87%E8%BF%87%E6%BB%A4/</link>
      <pubDate>Fri, 24 Dec 2021 12:01:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/can%E6%80%BB%E7%BA%BF/can%E6%80%BB%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05%E6%8A%A5%E6%96%87%E8%BF%87%E6%BB%A4/</guid>
      <description>在CAN总线中没有地址的概念，CAN总线是通过报文ID来实现收发数据的。CAN节点上都会有一个验收滤波ID表，其位于CAN节点的验收滤波器中</description>
    </item>
    
    <item>
      <title>【CAN总线学习笔记】4、总线仲裁</title>
      <link>https://littlethinking.cn/post/can%E6%80%BB%E7%BA%BF/can%E6%80%BB%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04%E6%80%BB%E7%BA%BF%E4%BB%B2%E8%A3%81/</link>
      <pubDate>Mon, 20 Dec 2021 12:01:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/can%E6%80%BB%E7%BA%BF/can%E6%80%BB%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04%E6%80%BB%E7%BA%BF%E4%BB%B2%E8%A3%81/</guid>
      <description>在第三篇中将CAN协议帧结构基本介绍完了，下面来分析下具体的总线仲裁。 基于上节的仲裁段和控制段，这里主要考虑几种情况的仲裁： 假设一条CAN总</description>
    </item>
    
    <item>
      <title>【CAN总线学习笔记】3、CAN协议帧结构</title>
      <link>https://littlethinking.cn/post/can%E6%80%BB%E7%BA%BF/can%E6%80%BB%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03can%E5%8D%8F%E8%AE%AE%E5%B8%A7%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 19 Dec 2021 12:01:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/can%E6%80%BB%E7%BA%BF/can%E6%80%BB%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03can%E5%8D%8F%E8%AE%AE%E5%B8%A7%E7%BB%93%E6%9E%84/</guid>
      <description>在第二篇中仲裁机制部分我们提到CAN协议帧，总的来说CAN协议帧有5种类型，下面逐个展开。 由于数据帧与遥控帧的最大差别在于遥控帧没有数据段，</description>
    </item>
    
    <item>
      <title>【CAN总线学习笔记】2、CAN总线特性</title>
      <link>https://littlethinking.cn/post/can%E6%80%BB%E7%BA%BF/can%E6%80%BB%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02can%E6%80%BB%E7%BA%BF%E7%89%B9%E6%80%A7/</link>
      <pubDate>Sat, 18 Dec 2021 12:01:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/can%E6%80%BB%E7%BA%BF/can%E6%80%BB%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02can%E6%80%BB%E7%BA%BF%E7%89%B9%E6%80%A7/</guid>
      <description>1 多主工作方式 CAN总线上的所有节点没有主从之分，反应在数据传输上是：在总线空闲状态下，任意节点都可以向总线上发送信息。另外：最先向总线发送</description>
    </item>
    
    <item>
      <title>【CAN总线学习笔记】1、CAN概述</title>
      <link>https://littlethinking.cn/post/can%E6%80%BB%E7%BA%BF/can%E6%80%BB%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01can%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Wed, 17 Nov 2021 12:01:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/can%E6%80%BB%E7%BA%BF/can%E6%80%BB%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01can%E6%A6%82%E8%BF%B0/</guid>
      <description>控制器局域网CAN( Controller Area Network)属于现场总线的范畴，是一种有效支持分布式控制系统的串行通信网络。是由德国博世公司在20世纪80年代专</description>
    </item>
    
    <item>
      <title>【C&#43;&#43;】UML类图</title>
      <link>https://littlethinking.cn/post/cpp/uml%E7%B1%BB%E5%9B%BE/</link>
      <pubDate>Mon, 15 Nov 2021 12:01:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/cpp/uml%E7%B1%BB%E5%9B%BE/</guid>
      <description>1 什么是UML类图 在UML 2.*的13种图形中，类图是使用频率最高的UML图之一。类图是面向对象系统建模中最常用和最重要的图，是定义其它图的</description>
    </item>
    
    <item>
      <title>【机器人学基础知识】10、运动学已经够用，为什么还要动力学</title>
      <link>https://littlethinking.cn/post/robotics/%E5%B9%B2%E8%B4%A7_10%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%8A%A8%E5%8A%9B%E5%AD%A6/</link>
      <pubDate>Thu, 28 Jan 2021 14:03:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/robotics/%E5%B9%B2%E8%B4%A7_10%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%8A%A8%E5%8A%9B%E5%AD%A6/</guid>
      <description>本文为承上启下的一篇文章：一方面，我们很有必要把之前讲过的东西串起来过一遍；另一方面，在我们开始啃机械臂的动力学（dynamics）这块硬骨</description>
    </item>
    
    <item>
      <title>【机器人学基础知识】9、“逆运动学”——从操作空间到关节空间（下篇）</title>
      <link>https://littlethinking.cn/post/robotics/%E5%B9%B2%E8%B4%A7_09%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6-%E4%BB%8E%E6%93%8D%E4%BD%9C%E7%A9%BA%E9%97%B4%E5%88%B0%E5%85%B3%E8%8A%82%E7%A9%BA%E9%97%B4%E4%B8%8B%E7%AF%87/</link>
      <pubDate>Tue, 26 Jan 2021 14:03:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/robotics/%E5%B9%B2%E8%B4%A7_09%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6-%E4%BB%8E%E6%93%8D%E4%BD%9C%E7%A9%BA%E9%97%B4%E5%88%B0%E5%85%B3%E8%8A%82%E7%A9%BA%E9%97%B4%E4%B8%8B%E7%AF%87/</guid>
      <description>逆运动学，就是从操作空间的end effector position and orientation,求关节空间的joint position的问题。在上一篇文章中，我们简单提到求逆</description>
    </item>
    
    <item>
      <title>【机器人学基础知识】8、“逆运动学”——从操作空间到关节空间（上篇）</title>
      <link>https://littlethinking.cn/post/robotics/%E5%B9%B2%E8%B4%A7_08%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6-%E4%BB%8E%E6%93%8D%E4%BD%9C%E7%A9%BA%E9%97%B4%E5%88%B0%E5%85%B3%E8%8A%82%E7%A9%BA%E9%97%B4/</link>
      <pubDate>Sun, 24 Jan 2021 14:03:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/robotics/%E5%B9%B2%E8%B4%A7_08%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6-%E4%BB%8E%E6%93%8D%E4%BD%9C%E7%A9%BA%E9%97%B4%E5%88%B0%E5%85%B3%E8%8A%82%E7%A9%BA%E9%97%B4/</guid>
      <description>0 复习 机器人学基础知识已经完成第8篇了，这里梳理下： 入门：如果不清楚R关节与P关节，建议再去看第一篇文章【机器人学基础知识】1、从RP关节入</description>
    </item>
    
    <item>
      <title>【机器人学基础知识】7、力的传递关系、奇异、冗余——从雅可比矩阵你还能得到什么？(雅可比矩阵下篇)</title>
      <link>https://littlethinking.cn/post/robotics/%E5%B9%B2%E8%B4%A7_07%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5%E7%BB%88%E7%AF%87/</link>
      <pubDate>Sun, 17 Jan 2021 14:03:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/robotics/%E5%B9%B2%E8%B4%A7_07%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5%E7%BB%88%E7%AF%87/</guid>
      <description>0 回顾 这是关于雅可比矩阵的第三篇文章。我们回顾下前面的内容，雅可比矩阵从何而来、如何求之。 首先我们在学习正运动学——即如何将关节空间的位置映</description>
    </item>
    
    <item>
      <title>【机器人学基础知识】6、机械臂的雅可比矩阵这么厉害，怎么把它求出来呢？</title>
      <link>https://littlethinking.cn/post/robotics/%E5%B9%B2%E8%B4%A7_06%E6%80%8E%E4%B9%88%E6%B1%82%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5/</link>
      <pubDate>Thu, 14 Jan 2021 16:01:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/robotics/%E5%B9%B2%E8%B4%A7_06%E6%80%8E%E4%B9%88%E6%B1%82%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5/</guid>
      <description>上一篇文章我们从正运动学公式推导出瞬时运动学公式，推出著名的雅可比矩阵，并例举出了一个特别简单的例子以提供直观印象。简单回顾一下—— 瞬时运动</description>
    </item>
    
    <item>
      <title>【机器人学基础知识】5、“瞬时运动学”——还是从关节空间到操作空间</title>
      <link>https://littlethinking.cn/post/robotics/%E5%B9%B2%E8%B4%A7_05%E7%9E%AC%E6%97%B6%E8%BF%90%E5%8A%A8%E5%AD%A6/</link>
      <pubDate>Wed, 13 Jan 2021 16:01:23 +0800</pubDate>
      
      <guid>https://littlethinking.cn/post/robotics/%E5%B9%B2%E8%B4%A7_05%E7%9E%AC%E6%97%B6%E8%BF%90%E5%8A%A8%E5%AD%A6/</guid>
      <description>看懂本文，除了了解矩阵、向量、向量点乘、矩阵向量相乘等内容，以及看明白我们该系列的前四篇文章外，你还需要懂得简单的向量求导运算——其实很简单</description>
    </item>
    
  </channel>
</rss>
